//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BookwormApp
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DataEntities : DbContext
    {
        public DataEntities()
            : base("name=DataEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AUTHOR> AUTHORs { get; set; }
        public virtual DbSet<BOOK> BOOKS { get; set; }
        public virtual DbSet<CART> CARTs { get; set; }
        public virtual DbSet<CUSTOMER> CUSTOMERs { get; set; }
        public virtual DbSet<GENRE> GENREs { get; set; }
        public virtual DbSet<INVENTORY> INVENTORies { get; set; }
        public virtual DbSet<INVOICE> INVOICEs { get; set; }
        public virtual DbSet<LOGIN> LOGINs { get; set; }
        public virtual DbSet<PUBLISHER> PUBLISHERs { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<BILLING> BILLINGs { get; set; }
        public virtual DbSet<BOOK_AUTHOR> BOOK_AUTHOR { get; set; }
        public virtual DbSet<BOOK_CART> BOOK_CART { get; set; }
        public virtual DbSet<CREDIT_CARD> CREDIT_CARD { get; set; }
        public virtual DbSet<EMPLOYEE> EMPLOYEEs { get; set; }
        public virtual DbSet<SHIPPING> SHIPPINGs { get; set; }
        public virtual DbSet<ShowCustomersByDateRange> ShowCustomersByDateRanges { get; set; }
        public virtual DbSet<ShowCustomersByLocationAndDate> ShowCustomersByLocationAndDates { get; set; }
    
        public virtual int AddAuthor(string firstName, string lastName, string biography)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var biographyParameter = biography != null ?
                new ObjectParameter("Biography", biography) :
                new ObjectParameter("Biography", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddAuthor", firstNameParameter, lastNameParameter, biographyParameter);
        }
    
        public virtual int AddBilling(Nullable<int> customerId, Nullable<int> cardId, string state, string street, string city, Nullable<int> zip)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var cardIdParameter = cardId.HasValue ?
                new ObjectParameter("CardId", cardId) :
                new ObjectParameter("CardId", typeof(int));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var zipParameter = zip.HasValue ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddBilling", customerIdParameter, cardIdParameter, stateParameter, streetParameter, cityParameter, zipParameter);
        }
    
        public virtual int AddBook(Nullable<int> publisherId, string title, Nullable<int> edition, Nullable<int> rating, string type, string description, Nullable<int> iSBM, Nullable<System.DateTime> copyRightDate)
        {
            var publisherIdParameter = publisherId.HasValue ?
                new ObjectParameter("PublisherId", publisherId) :
                new ObjectParameter("PublisherId", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var editionParameter = edition.HasValue ?
                new ObjectParameter("Edition", edition) :
                new ObjectParameter("Edition", typeof(int));
    
            var ratingParameter = rating.HasValue ?
                new ObjectParameter("Rating", rating) :
                new ObjectParameter("Rating", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var iSBMParameter = iSBM.HasValue ?
                new ObjectParameter("ISBM", iSBM) :
                new ObjectParameter("ISBM", typeof(int));
    
            var copyRightDateParameter = copyRightDate.HasValue ?
                new ObjectParameter("CopyRightDate", copyRightDate) :
                new ObjectParameter("CopyRightDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddBook", publisherIdParameter, titleParameter, editionParameter, ratingParameter, typeParameter, descriptionParameter, iSBMParameter, copyRightDateParameter);
        }
    
        public virtual int AddBook_Author(Nullable<int> bookId, Nullable<int> authorId)
        {
            var bookIdParameter = bookId.HasValue ?
                new ObjectParameter("BookId", bookId) :
                new ObjectParameter("BookId", typeof(int));
    
            var authorIdParameter = authorId.HasValue ?
                new ObjectParameter("AuthorId", authorId) :
                new ObjectParameter("AuthorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddBook_Author", bookIdParameter, authorIdParameter);
        }
    
        public virtual int AddBookToCart(Nullable<int> cartId, Nullable<int> bookId, Nullable<int> quantity)
        {
            var cartIdParameter = cartId.HasValue ?
                new ObjectParameter("CartId", cartId) :
                new ObjectParameter("CartId", typeof(int));
    
            var bookIdParameter = bookId.HasValue ?
                new ObjectParameter("BookId", bookId) :
                new ObjectParameter("BookId", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddBookToCart", cartIdParameter, bookIdParameter, quantityParameter);
        }
    
        public virtual int AddBookToInventory(Nullable<int> bookId, Nullable<decimal> retailPrice, Nullable<decimal> wholeSalePrice, Nullable<int> numInStock)
        {
            var bookIdParameter = bookId.HasValue ?
                new ObjectParameter("BookId", bookId) :
                new ObjectParameter("BookId", typeof(int));
    
            var retailPriceParameter = retailPrice.HasValue ?
                new ObjectParameter("RetailPrice", retailPrice) :
                new ObjectParameter("RetailPrice", typeof(decimal));
    
            var wholeSalePriceParameter = wholeSalePrice.HasValue ?
                new ObjectParameter("WholeSalePrice", wholeSalePrice) :
                new ObjectParameter("WholeSalePrice", typeof(decimal));
    
            var numInStockParameter = numInStock.HasValue ?
                new ObjectParameter("NumInStock", numInStock) :
                new ObjectParameter("NumInStock", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddBookToInventory", bookIdParameter, retailPriceParameter, wholeSalePriceParameter, numInStockParameter);
        }
    
        public virtual int AddCart(Nullable<int> customerId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCart", customerIdParameter);
        }
    
        public virtual int AddCreditCard(string cardType, Nullable<int> cardNumber, string nameOnCard, Nullable<System.DateTime> expirationDate, Nullable<int> securityCode)
        {
            var cardTypeParameter = cardType != null ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(string));
    
            var cardNumberParameter = cardNumber.HasValue ?
                new ObjectParameter("CardNumber", cardNumber) :
                new ObjectParameter("CardNumber", typeof(int));
    
            var nameOnCardParameter = nameOnCard != null ?
                new ObjectParameter("NameOnCard", nameOnCard) :
                new ObjectParameter("NameOnCard", typeof(string));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            var securityCodeParameter = securityCode.HasValue ?
                new ObjectParameter("SecurityCode", securityCode) :
                new ObjectParameter("SecurityCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCreditCard", cardTypeParameter, cardNumberParameter, nameOnCardParameter, expirationDateParameter, securityCodeParameter);
        }
    
        public virtual int AddCustomer(string email, string firstName, string lastName, Nullable<System.DateTime> dateOfBirth, string homePhone, string gender, string state)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(System.DateTime));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCustomer", emailParameter, firstNameParameter, lastNameParameter, dateOfBirthParameter, homePhoneParameter, genderParameter, stateParameter);
        }
    
        public virtual int AddEmployee(string employeeEmail, string password, Nullable<int> permissionLvl)
        {
            var employeeEmailParameter = employeeEmail != null ?
                new ObjectParameter("EmployeeEmail", employeeEmail) :
                new ObjectParameter("EmployeeEmail", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var permissionLvlParameter = permissionLvl.HasValue ?
                new ObjectParameter("PermissionLvl", permissionLvl) :
                new ObjectParameter("PermissionLvl", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEmployee", employeeEmailParameter, passwordParameter, permissionLvlParameter);
        }
    
        public virtual int AddGenre(string genreName)
        {
            var genreNameParameter = genreName != null ?
                new ObjectParameter("GenreName", genreName) :
                new ObjectParameter("GenreName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddGenre", genreNameParameter);
        }
    
        public virtual int AddGenre_Book(Nullable<int> bookId, string genreName)
        {
            var bookIdParameter = bookId.HasValue ?
                new ObjectParameter("BookId", bookId) :
                new ObjectParameter("BookId", typeof(int));
    
            var genreNameParameter = genreName != null ?
                new ObjectParameter("GenreName", genreName) :
                new ObjectParameter("GenreName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddGenre_Book", bookIdParameter, genreNameParameter);
        }
    
        public virtual int AddPublisher(string name, string street, string city, string state, string zip, string phone, string contactName)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var contactNameParameter = contactName != null ?
                new ObjectParameter("ContactName", contactName) :
                new ObjectParameter("ContactName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPublisher", nameParameter, streetParameter, cityParameter, stateParameter, zipParameter, phoneParameter, contactNameParameter);
        }
    
        public virtual int AddShipping(Nullable<int> customerId, string state, string street, string city, Nullable<int> zip)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var zipParameter = zip.HasValue ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddShipping", customerIdParameter, stateParameter, streetParameter, cityParameter, zipParameter);
        }
    
        public virtual int AddUserAsCustomer(string email, string password, string firstName, string lastName, Nullable<System.DateTime> dateOfBirth, string homePhone, string workPhone, string gender, string state)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(System.DateTime));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var workPhoneParameter = workPhone != null ?
                new ObjectParameter("WorkPhone", workPhone) :
                new ObjectParameter("WorkPhone", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUserAsCustomer", emailParameter, passwordParameter, firstNameParameter, lastNameParameter, dateOfBirthParameter, homePhoneParameter, workPhoneParameter, genderParameter, stateParameter);
        }
    
        public virtual int AddUserAsEmployee(string email, string password, Nullable<int> permissionLvl)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var permissionLvlParameter = permissionLvl.HasValue ?
                new ObjectParameter("PermissionLvl", permissionLvl) :
                new ObjectParameter("PermissionLvl", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUserAsEmployee", emailParameter, passwordParameter, permissionLvlParameter);
        }
    
        public virtual int CreateInvoice(Nullable<int> customerId, Nullable<int> cartId, Nullable<int> billingId, Nullable<int> shippingId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var cartIdParameter = cartId.HasValue ?
                new ObjectParameter("CartId", cartId) :
                new ObjectParameter("CartId", typeof(int));
    
            var billingIdParameter = billingId.HasValue ?
                new ObjectParameter("BillingId", billingId) :
                new ObjectParameter("BillingId", typeof(int));
    
            var shippingIdParameter = shippingId.HasValue ?
                new ObjectParameter("ShippingId", shippingId) :
                new ObjectParameter("ShippingId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateInvoice", customerIdParameter, cartIdParameter, billingIdParameter, shippingIdParameter);
        }
    
        public virtual int DeleteCustomer(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCustomer", emailParameter);
        }
    
        public virtual int DeleteEmployee(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEmployee", emailParameter);
        }
    
        public virtual int DeleteUser(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUser", emailParameter);
        }
    
        public virtual int DisableCart(Nullable<int> cartId)
        {
            var cartIdParameter = cartId.HasValue ?
                new ObjectParameter("CartId", cartId) :
                new ObjectParameter("CartId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DisableCart", cartIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetBookAuthors(Nullable<int> bookId)
        {
            var bookIdParameter = bookId.HasValue ?
                new ObjectParameter("BookId", bookId) :
                new ObjectParameter("BookId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetBookAuthors", bookIdParameter);
        }
    
        public virtual ObjectResult<string> GetBookGenres(Nullable<int> bookId)
        {
            var bookIdParameter = bookId.HasValue ?
                new ObjectParameter("BookId", bookId) :
                new ObjectParameter("BookId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetBookGenres", bookIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetBooksByGenre(string genreName)
        {
            var genreNameParameter = genreName != null ?
                new ObjectParameter("GenreName", genreName) :
                new ObjectParameter("GenreName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetBooksByGenre", genreNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetBooksByPublisher(Nullable<int> publisherId)
        {
            var publisherIdParameter = publisherId.HasValue ?
                new ObjectParameter("PublisherId", publisherId) :
                new ObjectParameter("PublisherId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetBooksByPublisher", publisherIdParameter);
        }
    
        public virtual ObjectResult<GetCustomerHistory_Result> GetCustomerHistory(Nullable<int> customerId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerHistory_Result>("GetCustomerHistory", customerIdParameter);
        }
    
        public virtual ObjectResult<GetPublisherSalesByDay_Result> GetPublisherSalesByDay(Nullable<int> publisherId)
        {
            var publisherIdParameter = publisherId.HasValue ?
                new ObjectParameter("PublisherId", publisherId) :
                new ObjectParameter("PublisherId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPublisherSalesByDay_Result>("GetPublisherSalesByDay", publisherIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetRevenueOverTimeFrame(Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetRevenueOverTimeFrame", fromParameter, toParameter);
        }
    
        public virtual int GetUserID(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));

            var resultParameter = new ObjectParameter("@Result", 0);
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUserID", emailParameter, resultParameter);
        }
    
        public virtual int RemoveBookFromCart(Nullable<int> cartId, Nullable<int> bookId)
        {
            var cartIdParameter = cartId.HasValue ?
                new ObjectParameter("CartId", cartId) :
                new ObjectParameter("CartId", typeof(int));
    
            var bookIdParameter = bookId.HasValue ?
                new ObjectParameter("BookId", bookId) :
                new ObjectParameter("BookId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveBookFromCart", cartIdParameter, bookIdParameter);
        }
    
        public virtual int RemoveQuantityOfBookFromCart(Nullable<int> cartId, Nullable<int> bookId, Nullable<int> quantity)
        {
            var cartIdParameter = cartId.HasValue ?
                new ObjectParameter("CartId", cartId) :
                new ObjectParameter("CartId", typeof(int));
    
            var bookIdParameter = bookId.HasValue ?
                new ObjectParameter("BookId", bookId) :
                new ObjectParameter("BookId", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveQuantityOfBookFromCart", cartIdParameter, bookIdParameter, quantityParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int Update_Publisher(string name, string street, string zip, string newStreet, string city, string state, string newZip, string phone, string contactName)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var newStreetParameter = newStreet != null ?
                new ObjectParameter("NewStreet", newStreet) :
                new ObjectParameter("NewStreet", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var newZipParameter = newZip != null ?
                new ObjectParameter("NewZip", newZip) :
                new ObjectParameter("NewZip", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var contactNameParameter = contactName != null ?
                new ObjectParameter("ContactName", contactName) :
                new ObjectParameter("ContactName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Publisher", nameParameter, streetParameter, zipParameter, newStreetParameter, cityParameter, stateParameter, newZipParameter, phoneParameter, contactNameParameter);
        }
    
        public virtual int UpdateBilling(string oldState, string oldStreet, string oldCity, Nullable<int> oldZip, string newState, string newStreet, string newCity, Nullable<int> newZip)
        {
            var oldStateParameter = oldState != null ?
                new ObjectParameter("oldState", oldState) :
                new ObjectParameter("oldState", typeof(string));
    
            var oldStreetParameter = oldStreet != null ?
                new ObjectParameter("oldStreet", oldStreet) :
                new ObjectParameter("oldStreet", typeof(string));
    
            var oldCityParameter = oldCity != null ?
                new ObjectParameter("oldCity", oldCity) :
                new ObjectParameter("oldCity", typeof(string));
    
            var oldZipParameter = oldZip.HasValue ?
                new ObjectParameter("oldZip", oldZip) :
                new ObjectParameter("oldZip", typeof(int));
    
            var newStateParameter = newState != null ?
                new ObjectParameter("newState", newState) :
                new ObjectParameter("newState", typeof(string));
    
            var newStreetParameter = newStreet != null ?
                new ObjectParameter("newStreet", newStreet) :
                new ObjectParameter("newStreet", typeof(string));
    
            var newCityParameter = newCity != null ?
                new ObjectParameter("newCity", newCity) :
                new ObjectParameter("newCity", typeof(string));
    
            var newZipParameter = newZip.HasValue ?
                new ObjectParameter("newZip", newZip) :
                new ObjectParameter("newZip", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateBilling", oldStateParameter, oldStreetParameter, oldCityParameter, oldZipParameter, newStateParameter, newStreetParameter, newCityParameter, newZipParameter);
        }
    
        public virtual int UpdateCreditCard(Nullable<int> oldCardNumber, Nullable<int> newCardNumber)
        {
            var oldCardNumberParameter = oldCardNumber.HasValue ?
                new ObjectParameter("oldCardNumber", oldCardNumber) :
                new ObjectParameter("oldCardNumber", typeof(int));
    
            var newCardNumberParameter = newCardNumber.HasValue ?
                new ObjectParameter("newCardNumber", newCardNumber) :
                new ObjectParameter("newCardNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCreditCard", oldCardNumberParameter, newCardNumberParameter);
        }
    
        public virtual int UpdateCustomerEmail(string oldEmail, string newEmail)
        {
            var oldEmailParameter = oldEmail != null ?
                new ObjectParameter("oldEmail", oldEmail) :
                new ObjectParameter("oldEmail", typeof(string));
    
            var newEmailParameter = newEmail != null ?
                new ObjectParameter("newEmail", newEmail) :
                new ObjectParameter("newEmail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCustomerEmail", oldEmailParameter, newEmailParameter);
        }
    
        public virtual int UpdateEmployeeEmail(string oldEmployeeEmail, string newEmployeeEmail)
        {
            var oldEmployeeEmailParameter = oldEmployeeEmail != null ?
                new ObjectParameter("oldEmployeeEmail", oldEmployeeEmail) :
                new ObjectParameter("oldEmployeeEmail", typeof(string));
    
            var newEmployeeEmailParameter = newEmployeeEmail != null ?
                new ObjectParameter("newEmployeeEmail", newEmployeeEmail) :
                new ObjectParameter("newEmployeeEmail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEmployeeEmail", oldEmployeeEmailParameter, newEmployeeEmailParameter);
        }
    
        public virtual int UpdateEmployeePassword(string email, string password)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEmployeePassword", emailParameter, passwordParameter);
        }
    
        public virtual int UpdatePriceOfBook(Nullable<int> inventoryId, Nullable<decimal> oldBookPrice, Nullable<decimal> newBookPrice)
        {
            var inventoryIdParameter = inventoryId.HasValue ?
                new ObjectParameter("InventoryId", inventoryId) :
                new ObjectParameter("InventoryId", typeof(int));
    
            var oldBookPriceParameter = oldBookPrice.HasValue ?
                new ObjectParameter("oldBookPrice", oldBookPrice) :
                new ObjectParameter("oldBookPrice", typeof(decimal));
    
            var newBookPriceParameter = newBookPrice.HasValue ?
                new ObjectParameter("newBookPrice", newBookPrice) :
                new ObjectParameter("newBookPrice", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePriceOfBook", inventoryIdParameter, oldBookPriceParameter, newBookPriceParameter);
        }
    
        public virtual int UpdateShipping(string oldState, string oldStreet, string oldCity, Nullable<int> oldZip, string newState, string newStreet, string newCity, Nullable<int> newZip)
        {
            var oldStateParameter = oldState != null ?
                new ObjectParameter("oldState", oldState) :
                new ObjectParameter("oldState", typeof(string));
    
            var oldStreetParameter = oldStreet != null ?
                new ObjectParameter("oldStreet", oldStreet) :
                new ObjectParameter("oldStreet", typeof(string));
    
            var oldCityParameter = oldCity != null ?
                new ObjectParameter("oldCity", oldCity) :
                new ObjectParameter("oldCity", typeof(string));
    
            var oldZipParameter = oldZip.HasValue ?
                new ObjectParameter("oldZip", oldZip) :
                new ObjectParameter("oldZip", typeof(int));
    
            var newStateParameter = newState != null ?
                new ObjectParameter("newState", newState) :
                new ObjectParameter("newState", typeof(string));
    
            var newStreetParameter = newStreet != null ?
                new ObjectParameter("newStreet", newStreet) :
                new ObjectParameter("newStreet", typeof(string));
    
            var newCityParameter = newCity != null ?
                new ObjectParameter("newCity", newCity) :
                new ObjectParameter("newCity", typeof(string));
    
            var newZipParameter = newZip.HasValue ?
                new ObjectParameter("newZip", newZip) :
                new ObjectParameter("newZip", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateShipping", oldStateParameter, oldStreetParameter, oldCityParameter, oldZipParameter, newStateParameter, newStreetParameter, newCityParameter, newZipParameter);
        }
    
        public virtual int UpdateUserEmail(string oldEmail, string newEmail)
        {
            var oldEmailParameter = oldEmail != null ?
                new ObjectParameter("oldEmail", oldEmail) :
                new ObjectParameter("oldEmail", typeof(string));
    
            var newEmailParameter = newEmail != null ?
                new ObjectParameter("newEmail", newEmail) :
                new ObjectParameter("newEmail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUserEmail", oldEmailParameter, newEmailParameter);
        }
    
        public virtual int UpdateUserPassword(string email, string password)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUserPassword", emailParameter, passwordParameter);
        }
    
        public virtual int UpdateWholeSalePriceOfBook(Nullable<int> inventoryId, Nullable<decimal> oldBookPrice, Nullable<decimal> newBookPrice)
        {
            var inventoryIdParameter = inventoryId.HasValue ?
                new ObjectParameter("InventoryId", inventoryId) :
                new ObjectParameter("InventoryId", typeof(int));
    
            var oldBookPriceParameter = oldBookPrice.HasValue ?
                new ObjectParameter("oldBookPrice", oldBookPrice) :
                new ObjectParameter("oldBookPrice", typeof(decimal));
    
            var newBookPriceParameter = newBookPrice.HasValue ?
                new ObjectParameter("newBookPrice", newBookPrice) :
                new ObjectParameter("newBookPrice", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateWholeSalePriceOfBook", inventoryIdParameter, oldBookPriceParameter, newBookPriceParameter);
        }
    }
}
